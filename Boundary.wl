(* ::Package:: *)

(* ::Input:: *)
(*(*EpidCRN Boundary Subpackage-NGM and Boundary Analysis*)BeginPackage["EpidCRN`Boundary`",{"EpidCRN`Core`"}];*)
(**)
(*(* =========================================================================*)*)
(*(*BOUNDARY ANALYSIS-NGM and Fixed Point Analysis*)*)
(*(* =========================================================================*)*)
(**)
(*Begin["`Private`"];*)
(**)
(*(* =========================================================================*)*)
(*(*NGM AND REPRODUCTION NUMBER ANALYSIS*)*)
(*(* =========================================================================*)*)
(**)
(*NGM[mod_,inf_:{}]:=Module[{dyn,X,infc,Jx,Jy,Jxy,Jyx,V1,F1,F,V,K,chp,Kd},dyn=mod[[1]];*)
(*X=mod[[2]];*)
(*infc=Complement[Range[Length[X]],inf];*)
(*Jx=Grad[dyn[[inf]],X[[inf]]];*)
(*Jy=Grad[dyn[[infc]],X[[infc]]];*)
(*Jxy=Grad[dyn[[inf]],X[[infc]]];*)
(*Jyx=Grad[dyn[[infc]],X[[inf]]];*)
(*chp=CharacteristicPolynomial[Jx,#]&;*)
(*V1=-Jx/. Thread[X[[infc]]->0];*)
(*F1=Jx+V1/. Thread[X[[inf]]->0];*)
(*F=ReplaceAll[F1,_. _?Negative->0];*)
(*V=F-Jx;*)
(*K=(F . Inverse[V])/. Thread[X[[inf]]->0]//FullSimplify;*)
(*Kd=(Inverse[V] . F)/. Thread[X[[inf]]->0]//FullSimplify;*)
(*{Jx,F,V,K,Jy,Jxy,Jyx,chp,Kd}];*)
(**)
(*DFE[mod_,inf_:{},cn_:{}]:=Module[{dyn,X},dyn=mod[[1]]/. cn;*)
(*X=mod[[2]];*)
(*Quiet[Solve[Thread[dyn==0]/. Thread[X[[inf]]->0],X]]];*)
(**)
(*mRts[RN_,ks_]:=Module[{rts,spe,al,be,var},{spe,al,be}=extMat[RN][[{1,2,3}]];*)
(*var=ToExpression[spe];*)
(*rts=Table[ks[[i]]*Product[var[[j]]^al[[j,i]],{j,Length[var]}],{i,Length[RN]}];*)
(*rts];*)
(**)
(*JR0[pol_,u_]:=Module[{co,co1,cop,con,R0J},co=CoefficientList[pol,u];*)
(*Print["the factor has degree ",Length[co]-1];*)
(*Print["its leading coefficient is ",co[[Length[co]]]];*)
(*co1=Expand[co[[1]]];*)
(*Print["its constant coefficient is ",co1];*)
(*cop=Replace[co1,_. _?Negative->0,{1}];*)
(*con=cop-co1;*)
(*Print["R0J is"];*)
(*R0J=con/cop//FullSimplify;*)
(*{R0J,co}];*)
(**)
(*extHD[poly_,var_]:=Module[{factored,factors,highDegree,linear},factored=Factor[poly];*)
(*factors=If[Head[factored]===Times,List@@factored,{factored}];*)
(*Print[factors//Length," factors: ",factors];*)
(*highDegree=Collect[#,var,Simplify]&/@Select[factors,PolynomialQ[#,var]&&Exponent[#,var]>=2&];*)
(*linear=Collect[#,var,Simplify]&/@Select[factors,PolynomialQ[#,var]&&Exponent[#,var]==1&&MemberQ[List@@Expand[#/. var->0],_?Negative,Infinity]&];*)
(*Print["High degree factors (degree >= 2): ",highDegree];*)
(*Print["Linear factors with possibly negative constant terms: ",linear];*)
(*{highDegree,linear}];*)
(**)
(*(* =========================================================================*)*)
(*(*BOUNDARY ANALYSIS FUNCTIONS*)*)
(*(* =========================================================================*)*)
(**)
(*bd1[RN_,rts_]:=Module[{spe,al,be,gam,Rv,RHS,def,var,par,cp,cv,ct,mS,mSi,inf,mod,K,Jx,Jy,mSi,R0,R0A,E0,EA,E1,ngm,fps,isRationalSolutionQ,isDFEQ},{spe,al,be,gam,Rv,RHS,def}=extMat[RN];*)
(*var=ToExpression[spe];*)
(*RHS=gam . rts//FullSimplify;*)
(*par=Par[RHS,var];*)
(*cp=Thread[par>0];*)
(*cv=Thread[var>=0];*)
(*ct=Join[cp,cv];*)
(*mS=minSiph[spe,asoRea[RN]];*)
(*mSi=Map[Flatten[Position[spe,#]&/@#]&,mS];*)
(*inf=Union[Flatten[mSi]];*)
(*(*Compute DFE*)cDFE=Flatten[Thread[ToExpression[#]->0]&/@mS];*)
(*RDFE=RHS/. cDFE;*)
(*eq0=Thread[RDFE==0];*)
(*var0=Complement[var,var[[inf]]];*)
(*so0=Solve[eq0,var0];*)
(*E0=Join[so0//Flatten,Thread[var[[inf]]->0]];*)
(*(*Compute NGM*)mod={RHS,var,par};*)
(*ngm=NGM[mod,inf];*)
(*Jx=ngm[[1]]//FullSimplify;*)
(*Jy=ngm[[5]]//FullSimplify;*)
(*K=ngm[[4]]//FullSimplify;*)
(*eig=Eigenvalues[K];*)
(*R0A=Select[eig,(#=!=0)&];*)
(*(*Compute boundary equilibrium for single strain*)EA={};*)
(*RHSEj=RHS;*)
(*eqEj=Thread[RHSEj==0];*)
(*varEj=var;*)
(*AppendTo[EA,{eqEj,varEj}];*)
(*(*Solve for fixed points*)fps=Solve[EA[[1]][[1]],EA[[1]][[2]]];*)
(*(*Helper functions*)isRationalSolutionQ[sol_]:=FreeQ[sol,Sqrt|Power[_,Except[_Integer]]|Root];*)
(*isDFEQ[sol_]:=Module[{infectionVars,vals},infectionVars=var[[inf]];*)
(*vals=Simplify[infectionVars/. sol,cp];*)
(*And@@((#===0)&)/@vals];*)
(*(*Filter for non-DFE rational solutions*)E1NonDFE=Select[fps,(!isDFEQ[#])&];*)
(*E1=Select[E1NonDFE,isRationalSolutionQ];*)
(*{RHS,var,par,cp,mSi,Jx,Jy,E0,ngm,R0A,EA,E1}];*)
(**)
(*bd2[RN_,rts_]:=Module[{spe,al,be,gam,Rv,RHS,def,var,par,cp,cv,ct,mS,mSi,inf,mod,K,eig,R0A,cDFE,RDFE,eq0,var0,E0,EA,cEj,RHSEj,eqEj,varEj,E1t,E2t,Jx,Jy,eigenSystem,eigenvals,eigenvecs,nonzeroIndices,relevantEigenvals,strainAssociation,sortedPairs,mSiNGM,ngm},{spe,al,be,gam,Rv,RHS,def}=extMat[RN];*)
(*var=ToExpression[spe];*)
(*RHS=gam . rts;*)
(*par=Par[RHS,var];*)
(*cp=Thread[par>0];*)
(*cv=Thread[var>=0];*)
(*ct=Join[cp,cv];*)
(*mS=minSiph[spe,asoRea[RN]];*)
(*mSi=Map[Flatten[Position[spe,#]&/@#]&,mS];*)
(*inf=Union[Flatten[mSi]];*)
(*(*Compute DFE*)cDFE=Flatten[Thread[ToExpression[#]->0]&/@mS];*)
(*RDFE=RHS/. cDFE;*)
(*eq0=Thread[RDFE==0];*)
(*var0=Complement[var,var[[inf]]];*)
(*E0=Join[Solve[eq0,var0]//Flatten,Thread[var[[inf]]->0]];*)
(*(*Compute NGM*)mod={RHS,var,par};*)
(*ngm=NGM[mod,inf];*)
(*Jx=ngm[[1]]//FullSimplify;*)
(*Jy=ngm[[5]]//FullSimplify;*)
(*K=ngm[[4]]//FullSimplify;*)
(*(*Get eigenvalues and organize by strain*)eigenSystem=Eigensystem[K];*)
(*eigenvals=eigenSystem[[1]];*)
(*eigenvecs=eigenSystem[[2]];*)
(*nonzeroIndices={};*)
(*Do[If[eigenvals[[i]]=!=0,AppendTo[nonzeroIndices,i]],{i,Length[eigenvals]}];*)
(*If[Length[nonzeroIndices]>0,relevantEigenvals=eigenvals[[nonzeroIndices]];*)
(*mSiNGM=Table[Flatten[Table[Position[inf,mSi[[i]][[j]]][[1,1]],{j,Length[mSi[[i]]]}]],{i,Length[mSi]}];*)
(*strainAssociation=Table[Module[{strain1Nonzeros,strain2Nonzeros,evec},evec=eigenvecs[[nonzeroIndices[[i]]]];*)
(*strain1Nonzeros=Count[evec[[mSiNGM[[1]]]],Except[0]];*)
(*strain2Nonzeros=Count[evec[[mSiNGM[[2]]]],Except[0]];*)
(*If[strain1Nonzeros>strain2Nonzeros,1,If[strain2Nonzeros>strain1Nonzeros,2,i]]],{i,Length[relevantEigenvals]}];*)
(*sortedPairs=Sort[Transpose[{strainAssociation,relevantEigenvals}]];*)
(*R0A=sortedPairs[[All,2]];,R0A={};];*)
(*(*Compute boundary equilibria for each strain*)EA={};*)
(*Do[elj=var[[Flatten[Delete[mSi,j]]]];*)
(*cEj=Thread[elj->0];*)
(*RHSEj=RHS/. cEj;*)
(*eqEj=Thread[RHSEj==0];*)
(*varEj=Complement[var,elj];*)
(*AppendTo[EA,{eqEj,varEj}],{j,mS//Length}];*)
(*E1t=Solve[EA[[1]][[1]],EA[[1]][[2]]];*)
(*E2t=Solve[EA[[2]][[1]],EA[[2]][[2]]];*)
(*(*Filter rational solutions*)isRationalSolutionQ[sol_]:=FreeQ[sol,Sqrt|Power[_,Except[_Integer]]|Root];*)
(*E1tRational=Select[E1t,isRationalSolutionQ];*)
(*E2tRational=Select[E2t,isRationalSolutionQ];*)
(*{RHS,var,par,cp,mSi,Jx,Jy,E0,ngm,R0A,EA,E1tRational,E2tRational}];*)
(**)
(*(*Utility function for parameters*)*)
(*Par[RHS_,X_]:=Complement[Variables[RHS],X];*)
(**)
(*End[];*)
(*EndPackage[];*)
