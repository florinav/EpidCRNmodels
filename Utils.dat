(* ========================================================================= *)
(* MODULE: RouthHurwitz.wl *)
(* ========================================================================= *)

CofRH[A_?MatrixQ] := Drop[Reverse[CoefficientList[(-1)^Length@A CharacteristicPolynomial[A, x], x]], 1];

Hur3M[A_] := Module[{co, h3, inec, ineSys, ω}, 
  co = CoefficientList[(-1)^Length[A] CharacteristicPolynomial[A, ω], ω];
  h3 = co[[2]]*co[[3]] - co[[1]]*co[[4]];
  inec = {co[[1]] > 0, co[[2]] > 0};
  ineSys = Append[inec, h3 > 0];
  {co, h3, ineSys}
];

(* Test *)
Hur3M[{{0, 1, 0}, {-2, -3, 0}, {0, 0, -1}}]

(* ========================================================================= *)
(* MODULE: MatrixTools.wl *)
(* ========================================================================= *)

makeLPM[mat_] := Table[Det@mat[[1 ;; i, 1 ;; i]], {i, 1, Length@mat}];

perR[M_, i_, j_] := ReplacePart[M, {i -> M[[j]], j -> M[[i]]}];

(* Test *)
makeLPM[{{2, 1}, {1, 3}}]

(* ========================================================================= *)
(* MODULE: Stability.wl *)
(* ========================================================================= *)

Stab[mod_, cfp_, cn_: {}] := Module[{dyn, X, par, jac, jacfp, eig}, 
  dyn = mod[[1]]; X = mod[[2]]; par = mod[[3]];
  jac = Grad[dyn, X]; jacfp = jac //. cfp;
  eig = Eigenvalues[jacfp /. cn]
];

(* Test *)
Stab[{{x + y, x - y}, {x, y}}, {x -> 1, y -> 2}]

(* ========================================================================= *)
(* MODULE: AlgebraTools.wl *)
(* ========================================================================= *)

Grobpol[RHS_, var_, par_, ind_, cn_: {}] := Module[{pol, sc, li, pa}, 
  pol = RHS[[ind]]; sc = 1; li = {pol, sc};
  pa = Complement[Variables[li], {var}];
  GroebnerBasis[{Numerator[Together[pol]], Numerator[Together[sc]]} /. cn, pa, {var}, MonomialOrder -> EliminationOrder]
];

(* Test *)
Grobpol[{x^2 + a x + b}, x, {a, b}, 1]

(* ========================================================================= *)
(* MODULE: AdvancedAnalysis.wl *)
(* ========================================================================= *)

GetVec[A_, ω_] := Module[{n, mtx, pconj, q, qconj, normalize}, 
  n = Length[A];
  mtx = A - ω I IdentityMatrix[n];
  q = NullSpace[mtx[[1 ;; n - 1]]][[1]];
  mtx = Transpose[A] - ω I IdentityMatrix[n];
  pconj = NullSpace[mtx[[1 ;; n - 1]]][[1]];
  normalize = FullSimplify[pconj . q];
  pconj = pconj/normalize;
  qconj = FullSimplify[ComplexExpand[Conjugate[q]]];
  {pconj, q, qconj}
];

(* Test *)
GetVec[{{0, -1}, {1, 0}}, 1]

(* ========================================================================= *)
(* MODULE: Utility.wl *)
(* ========================================================================= *)

Deg[poly_, var_] := Exponent[poly, var];

(* Test *)
Deg[x^3 + 2 x^2 + 1, x]
