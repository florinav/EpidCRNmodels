(* ::Package:: *)

(* ::Input:: *)
(*(*Mathematica Package for Solving Linear Complementarity Problems For each non-empty subset I_>,solve the LCP or return "none" All parameters are symbolic and positive*)BeginPackage["LCPSolver`"]*)
(**)
(*(*Public function declarations*)*)
(*SolveLCPForAllSubsets::usage="SolveLCPForAllSubsets[A, c, assumptions] solves LCP for all non-empty subsets"*)
(*SolveLCPForSubset::usage="SolveLCPForSubset[A, c, subset, assumptions] solves LCP for given subset"*)
(*GenerateAllNonEmptySubsets::usage="GenerateAllNonEmptySubsets[n] generates all non-empty subsets of {1,...,n}"*)
(**)
(*Begin["`Private`"]*)
(**)
(*(*Generate all non-empty subsets of {1,2,...,n}*)*)
(*GenerateAllNonEmptySubsets[n_Integer]:=Subsets[Range[n],{1,n}]*)
(**)
(*(*Solve LCP for a specific subset I_>*)*)
(*SolveLCPForSubset[A_?MatrixQ,c_?VectorQ,subset_List,assumptions_]:=Module[{n,AI,cI,xISol,x,residual,positivityCheck,feasibilityCheck,result},n=Length[c];*)
(*(*Extract submatrix A_I and subvector c_I*)AI=A[[subset,subset]];*)
(*cI=c[[subset]];*)
(*(*Solve A_I*x_I=-c_I*)xISol=Quiet[Solve[AI . Table[x[i],{i,Length[subset]}]==-cI,Table[x[i],{i,Length[subset]}]]];*)
(*(*Check if solution exists*)If[xISol==={}||xISol===$Failed,Return[<|"Subset"->subset,"Solution"->"none","Reason"->"No solution to linear system"|>]];*)
(*(*Extract solution values*)xISol=xISol[[1]];(*Take first solution if multiple exist*)(*Construct full solution vector*)x=Table[0,{n}];*)
(*Do[x[[subset[[i]]]]=x[i]/. xISol,{i,Length[subset]}];*)
(*(*Check positivity:x_i>0 for i\[Element]I_>*)positivityCheck=And@@Table[x[[subset[[i]]]]>0,{i,Length[subset]}];*)
(*(*Simplify under assumptions*)positivityCheck=Simplify[positivityCheck,assumptions];*)
(*(*If not positive,return "none"*)If[positivityCheck===False,Return[<|"Subset"->subset,"Solution"->"none","Reason"->"Solution not positive"|>]];*)
(*(*Check feasibility:c+A*x\[LessEqual]0*)residual=c+A . x;*)
(*residual=Simplify[residual,assumptions];*)
(*(*For i\[NotElement]I_>,we need c_i+(Ax)_i<0 (strict inequality)*)(*For i\[Element]I_>,we should have c_i+(Ax)_i=0*)complementSet=Complement[Range[n],subset];*)
(*feasibilityCheck=True;*)
(*(*Check strict inequality for complement*)If[Length[complementSet]>0,feasibilityCheck=And[feasibilityCheck,And@@Table[residual[[i]]<0,{i,complementSet}]]];*)
(*(*Check equality for subset (should be 0 by construction,but verify)*)feasibilityCheck=And[feasibilityCheck,And@@Table[Simplify[residual[[subset[[i]]]],assumptions]==0,{i,Length[subset]}]];*)
(*feasibilityCheck=Simplify[feasibilityCheck,assumptions];*)
(*(*Determine result*)If[feasibilityCheck===True,result=x,If[feasibilityCheck===False,result="none",result=<|"ConditionalSolution"->x,"Conditions"->feasibilityCheck|>]];*)
(*<|"Subset"->subset,"Solution"->result,"PositivityCheck"->positivityCheck,"FeasibilityCheck"->feasibilityCheck,"Residual"->residual|>]*)
(**)
(*(*Solve LCP for all non-empty subsets*)*)
(*SolveLCPForAllSubsets[A_?MatrixQ,c_?VectorQ,assumptions_:True]:=Module[{n,allSubsets,results,validCount},n=Length[c];*)
(*(*Generate all non-empty subsets*)allSubsets=GenerateAllNonEmptySubsets[n];*)
(*Print["Analyzing ",Length[allSubsets]," non-empty subsets of {1,...,",n,"}"];*)
(*Print["Assumptions: ",assumptions];*)
(*Print[StringRepeat["=",60]];*)
(*(*Solve LCP for each subset*)results=Table[Print["Checking subset ",k,"/",Length[allSubsets],": ",allSubsets[[k]]];*)
(*SolveLCPForSubset[A,c,allSubsets[[k]],assumptions],{k,Length[allSubsets]}];*)
(*(*Count valid solutions*)validCount=Count[results,KeyValuePattern["Solution"->Except["none"]]];*)
(*Print[StringRepeat["=",60]];*)
(*Print["Summary: ",validCount," valid solutions out of ",Length[allSubsets]," subsets"];*)
(*results]*)
(**)
(*(*Display results in readable format*)*)
(*DisplayResults[results_List]:=Module[{validResults,conditionalResults,noneResults},Print["\n"<>StringRepeat["=",60]];*)
(*Print["DETAILED RESULTS"];*)
(*Print[StringRepeat["=",60]];*)
(*(*Separate results by type*)validResults=Select[results,MatchQ[#["Solution"],_List]&];*)
(*conditionalResults=Select[results,MatchQ[#["Solution"],_Association]&];*)
(*noneResults=Select[results,#["Solution"]==="none"&];*)
(*(*Display valid solutions*)If[Length[validResults]>0,Print["\nVALID SOLUTIONS (",Length[validResults],"):"];*)
(*Do[Print["Subset I_> = ",validResults[[i]]["Subset"]];*)
(*Print["  Solution x = ",validResults[[i]]["Solution"]];*)
(*Print["  Residual = ",validResults[[i]]["Residual"]];*)
(*Print[""],{i,Length[validResults]}]];*)
(*(*Display conditional solutions*)If[Length[conditionalResults]>0,Print["\nCONDITIONAL SOLUTIONS (",Length[conditionalResults],"):"];*)
(*Do[Print["Subset I_> = ",conditionalResults[[i]]["Subset"]];*)
(*Print["  Solution x = ",conditionalResults[[i]]["Solution"]["ConditionalSolution"]];*)
(*Print["  Conditions = ",conditionalResults[[i]]["Solution"]["Conditions"]];*)
(*Print[""],{i,Length[conditionalResults]}]];*)
(*(*Display "none" results*)If[Length[noneResults]>0,Print["\nNO SOLUTIONS (",Length[noneResults],"):"];*)
(*Do[Print["Subset I_> = ",noneResults[[i]]["Subset"]," - Reason: ",noneResults[[i]]["Reason"]];,{i,Min[10,Length[noneResults]]}  (*Limit display to first 10*)];*)
(*If[Length[noneResults]>10,Print["... and ",Length[noneResults]-10," more"]];];]*)
(**)
(*(*Example function for 3-species epidemiological model*)*)
(*AnalyzeThreeSpeciesModel[eta1_Symbol,eta2_Symbol,mu1_Symbol,mu2_Symbol,mu3_Symbol,alpha1_Symbol,alpha2_Symbol,alpha3_Symbol,sbar_Symbol]:=Module[{A,c,assumptions,results},(*Anti-symmetric interaction matrix*)A={{0,0,-eta1},{0,0,-eta2},{eta1,eta2,0}};*)
(*(*Growth vector (c_i=-mu_i+alpha_i*sbar)*)c={-mu1+alpha1*sbar,-mu2+alpha2*sbar,-mu3+alpha3*sbar};*)
(*(*Assumptions:all parameters positive*)assumptions=And[eta1>0,eta2>0,mu1>0,mu2>0,mu3>0,alpha1>0,alpha2>0,alpha3>0,sbar>0];*)
(*Print["THREE-SPECIES EPIDEMIOLOGICAL MODEL"];*)
(*Print["A = ",MatrixForm[A]];*)
(*Print["c = ",c];*)
(*(*Calculate Delta*)Delta=eta2*(-mu1+alpha1*sbar)+eta1*(-mu2+alpha2*sbar);*)
(*Print["Delta = ",Simplify[Delta]];*)
(*results=SolveLCPForAllSubsets[A,c,assumptions];*)
(*DisplayResults[results];*)
(*<|"A"->A,"c"->c,"Delta"->Delta,"Results"->results|>]*)
(**)
(*(*Test with general symbolic matrices*)*)
(*TestGeneralCase[n_Integer]:=Module[{A,c,variables,assumptions,results},(*Create symbolic anti-symmetric matrix*)variables=Flatten[Table[a[i,j],{i,n},{j,i+1,n}]];*)
(*A=Table[Which[i==j,0,i<j,a[i,j],i>j,-a[j,i]],{i,n},{j,n}];*)
(*(*Create symbolic c vector*)c=Table[c[i],{i,n}];*)
(*variables=Join[variables,c];*)
(*(*Assumptions:all non-zero parameters are real*)assumptions=And@@(#\[Element]Reals&/@variables);*)
(*Print["GENERAL ",n,"x",n," CASE"];*)
(*Print["A = ",MatrixForm[A]];*)
(*Print["c = ",c];*)
(*results=SolveLCPForAllSubsets[A,c,assumptions];*)
(*DisplayResults[results];*)
(*results]*)
(**)
(*End[]*)
(*EndPackage[]*)
(**)
(*(*Usage instructions*)*)
(*Print["LCPSolver Package Loaded"];*)
(*Print["======================="];*)
(*Print["Functions:"];*)
(*Print["  SolveLCPForAllSubsets[A, c, assumptions] - Main function"];*)
(*Print["  AnalyzeThreeSpeciesModel[\[Eta]1,\[Eta]2,\[Mu]1,\[Mu]2,\[Mu]3,\[Alpha]1,\[Alpha]2,\[Alpha]3,s\:0304] - Epidemiological example"];*)
(*Print["  TestGeneralCase[n] - Test with nxn symbolic matrix"];*)
(*Print[""];*)
(*Print["Example usage:"];*)
(*Print["  results = AnalyzeThreeSpeciesModel[\[Eta]1,\[Eta]2,\[Mu]1,\[Mu]2,\[Mu]3,\[Alpha]1,\[Alpha]2,\[Alpha]3,s\:0304];"];*)
(*Print[""];*)
(**)
(*(*Uncomment to run example*)*)
(*(*AnalyzeThreeSpeciesModel[\[Eta]1,\[Eta]2,\[Mu]1,\[Mu]2,\[Mu]3,\[Alpha]1,\[Alpha]2,\[Alpha]3,s\:0304]*)*)
